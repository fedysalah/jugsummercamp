Step1

<link rel="manifest" href="/manifest.json">

{
  "short_name": "Jug 2018",
  "name": "JugSummercamp 2018",
  "icons": [
    {
      "src": "/images/logo.png",
      "sizes": "512x512 192x192 128x128 64x64 32x32 24x24 16x16",
      "type": "image/png"
    }
  ],
  "start_url": "/",
  "display": "standalone",
  "theme_color": "#79b3af",
  "background_color": "#faf7f0",
  "orientation": "portrait"
}


export default function register() {
  if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
        registerSW('/service-worker.js');
    });
  }
}

function registerSW(swUrl) {
  navigator.serviceWorker
    .register(swUrl)
    .then(registration => {
      registration.onupdatefound = () => {
        const installingWorker = registration.installing;
        installingWorker.onstatechange = () => {
          if (installingWorker.state === 'installed') {
            if (navigator.serviceWorker.controller) {
              // At this point, the old content will have been purged and
              // the fresh content will have been added to the cache.
              // It's the perfect time to display a "New content is
              // available; please refresh." message in your web app.
              document.getElementById('new-version-mobile').style = "";
              document.getElementById('new-version-desktop').style = "";
              console.log('New content is available; please refresh.');
            } else {
              // At this point, everything has been precached.
              // It's the perfect time to display a
              // "Content is cached for offline use." message.
              console.log('Content is cached for offline use.');
            }
          }
        };
      };
      //register stuff
    })
    .catch(error => {
      console.error('Error during service worker registration:', error);
    });
}

self.addEventListener('fetch', function(event) {

});

Step2

'push-support.js'

self.addEventListener('notificationclick', function (event) {
    console.log('On notification click: ', event.notification);
    event.notification.close();
    event.waitUntil(
        clients.matchAll({
            type: "window"
        }).then(function () {
            if (clients.openWindow) {
                return clients.openWindow(`https://jugsummercamp.cleverapps.io/program/${event.notification.data.talkId}`);
            }
        })
    );
});

self.addEventListener("push", e => {
    const data = e.data.json();
    console.log("Push Recieved... !n", data);
    self.registration.showNotification(data.title, {
        body: data.body,
        icon: data.icon,
        data: data.data,
    });
});

'sync-support.js'

importScripts('https://unpkg.com/dexie@2.0.4/dist/dexie.min.js');

const db = new Dexie("JugSummercampDatabase");

db.version(1).stores({
    favorites: "id,title,author,type,room,time,description,rank",
    ratings: "id,rate"
});

self.addEventListener('sync', function (event) {
    console.log("sync Recieved... !!!!!");

    if (event.tag == 'favorites_updated') {
        event.waitUntil(serverFavoritesSync());
    }
    if (event.tag == 'ratings_updated') {
        event.waitUntil(serverRatingsSync());
    }
});

function serverFavoritesSync() {
    return db.favorites.toArray()
        .then(favorites => {
            console.log('favorites', favorites);
            return self.registration.pushManager.getSubscription()
                .then(subscription => {
                    if (subscription) {
                        fetch("/api/syncFavorites", {
                            method: "POST",
                            body: JSON.stringify({subscription, talks: favorites}),
                            headers: {
                                "content-type": "application/json"
                            }
                        }).then(() => {
                            console.log("Favorites Synced...");
                        })
                        .catch(err => {
                            console.error('error', err);
                        });
                    }
                })
        })
}


function serverRatingsSync() {
    return db.ratings.toArray()
        .then(ratings => {
            console.log('ratings', ratings);
            return fetch("/api/syncRatings", {
                method: "POST",
                body: JSON.stringify({ratings}),
                headers: {
                    "content-type": "application/json"
                }
            }).then(() => {
                console.log("Ratings Synced...");
            });
        })
}

